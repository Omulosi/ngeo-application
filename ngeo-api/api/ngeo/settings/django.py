"""
Django settings for ngeo project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

import logging.config
import os
from datetime import timedelta

from pathlib import Path

from .environment import env

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def rel(*path):
    return os.path.join(BASE_DIR, *path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("NGEO_DEBUG")

ALLOWED_HOSTS = env.list("NGEO_ALLOWED_HOSTS", default=["*"])

SECRET_KEY = env.str("NGEO_SECRET_KEY")

# Default admin to be created by 'initadmin' command.
ADMINS = (
    # ('email', 'password'),
    ("admin@ngeo.com", "password"),
)

# Application definition

INSTALLED_APPS = [
    ## django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    ## 3rd party apps
    "rest_framework",
    "rest_framework.authtoken",
    "djoser",
    "rest_framework_tracking",
    "rest_framework_gis",
    "corsheaders",
    "notifications",
    "safedelete",
    'axes',
    # 'axes',
    # "django_filters",
    "workers",
    # 'django_expiring_token',
    "leaflet",
    "rest_framework_filters",
    "dj_rest_auth",
    ## our apps
    "ngeo.apps.common.apps.CommonConfig",
    "ngeo.apps.account.apps.AccountConfig",
    # "ngeo.apps.mail.apps.MailConfig",
    "ngeo.apps.agents.apps.AgentsConfig",
    "ngeo.apps.projects.apps.ProjectsConfig",
    "ngeo.apps.field_officer.apps.FieldOfficerConfig",
    # "ngeo.apps.shapefiles.apps.ShapefilesConfig",
    # "ngeo.apps.incidence.apps.IncidenceConfig",
    "ngeo.apps.county_manager.apps.CountyManagerConfig",
    "ngeo.apps.regional_manager.apps.RegionalManagerConfig",
    "ngeo.apps.finance.apps.FinanceConfig",
    "ngeo.apps.human_resource.apps.HumanResourceConfig",
    "ngeo.apps.threat.apps.ThreatConfig",
    "ngeo.apps.themes.apps.ThemesConfig",
    "ngeo.apps.ceo.apps.CeoConfig",
] + env.list("NGEO_DEV_INSTALLED_APPS", default=[])


# Axes settings

# AUTHENTICATION_BACKENDS = [
#     # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
#     'axes.backends.AxesBackend',

#     # Django ModelBackend is the default authentication backend.
#     'django.contrib.auth.backends.ModelBackend',
# ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'axes.middleware.AxesMiddleware',
] + env.list("NGEO_DEV_MIDDLEWARE", default=[])

ROOT_URLCONF = "ngeo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [rel("templates/")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "ngeo.wsgi.application"

# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

DATABASES = {"default": env.db("NGEO_DATABASE_URL")}

# Password validation
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "account.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

AUTHENTICATION_BACKENDS = [
    # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]


SESSION_COOKIE_SECURE = env.bool("NGEO_SESSION_COOKIE_SECURE", default=True)
SESSION_COOKIE_NAME = "s"
CSRF_COOKIE_NAME = "c"

# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATIC_URL = "/static/api/"
STATIC_ROOT = rel("staticfiles/")
STATICFILES_DIRS = (rel("static/"),)

MEDIA_URL = "/media/"
MEDIA_ROOT = rel("media/")

LOGGING_ROOT_DIR_PATH = Path(BASE_DIR).parent
LOGGING_CONFIG = None
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": "DEBUG",
        "handlers": ["console", "file"],
    },
    "formatters": {
        "custom": {
            # "format": "%(levelname)s %(message)s (in %(module)s.%(funcName)s:%(lineno)s by %(name)s)",
            "format": '%(asctime)s %(levelname)-8s %(message)s',
            "datefmt": "%Y-%m-%dT%H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "custom",
        },
        "file": {
            "level": "CRITICAL",
            "class": "logging.FileHandler",
            "formatter": "custom",
            "filename": LOGGING_ROOT_DIR_PATH / 'logs'/ 'logs.txt',
        },
    },
    "loggers": {
        "apps": {"level": "DEBUG", "handlers": ["console", "file"]},
        "project": {"level": "DEBUG"},
        "libs": {"level": "DEBUG"},
        "django": {"level": "INFO"},
        "gunicorn": {"level": "WARNING"},
        "workers": {"level": "DEBUG"},
    },
}

logging.config.dictConfig(LOGGING)

# ==================================================================================================
# 3RD PARTY SETTINGS
# ==================================================================================================
DJANGO_NOTIFICATIONS_CONFIG = {"USE_JSONFIELD": True, 'SOFT_DELETE': True}

CORS_ORIGIN_ALLOW_ALL = True

WORKERS_SLEEP = 1
WORKERS_PURGE = 1000

EXPIRING_TOKEN_DURATION = timedelta(hours=1)

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        # 'django_expiring_token.authentication.ExpiringTokenAuthentication',
        # SessionAuthentication may interfere with mobile API requests. If you are experiencing ssues, try commenting out the following line.
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10000,
    "DEFAULT_FILTER_BACKENDS": (
        "rest_framework_filters.backends.RestFrameworkFilterBackend",
        # "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
    ),
    "EXCEPTION_HANDLER": "rest_framework_json_api.exceptions.exception_handler",
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework_json_api.renderers.JSONRenderer",
        # If you're performance testing, you will want to use the browseable API
        # without forms, as the forms can generate their own queries.
        # If performance testing, enable:
        # 'example.utils.BrowsableAPIRendererWithoutForms',
        # Otherwise, to play around with the browseable API, enable:
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
}

# MAIL
SEND_MAIL = env.bool("SEND_MAIL")

if SEND_MAIL:
        EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
        EMAIL_HOST = env.str("SMTP_SERVER")
        EMAIL_USE_TLS = True
        EMAIL_USE_SSL = False
        EMAIL_PORT = env.str("SMTP_PORT", 587)
        # EMAIL Username
        EMAIL_HOST_USER = env.str("SMTP_LOGIN")
        # EMAIL Password
        EMAIL_HOST_PASSWORD = env.str("SMTP_PASSWORD")

# URL to frontend application
WEB_URL = env.str("WEB_URL")
DEFAULT_FROM_EMAIL = "ngeo@no-reply.org"
DEFAULT_FROM_NAME = "The NGEO Team"
RESET_PASSWORD_URL = "{}{}".format(WEB_URL, "/reset-password/{reset_token}/{user_id}")

DJOSER = {
    # URL to frontend password reset page: uid and token will be automatically
    # replaced when email is sent to user
    "PASSWORD_RESET_CONFIRM_URL": "{}{}".format(
        WEB_URL, "/password/reset/{uid}/{token}"
    ),
    # 'ACTIVATION_URL': '#/activate/{uid}/{token}',
    "SEND_ACTIVATION_EMAIL": False,
    # send confirmation email when password changes
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": True,
    "SERIALIZERS": {
        "user_create": "ngeo.apps.account.serializers.UserSerializer",
        "user": "ngeo.apps.account.serializers.UserSerializer",
        "current_user": "ngeo.apps.account.serializers.UserSerializer",
    },
}

SEARCH_PARAM = "search"

# Generate the object model of entire app as an image
GRAPH_MODELS = {
    "all_applications": False,
    "group_models": True,
    "app_labels": [
        "account",
        "agents",
        "county_manager",
        "field_officer",
        "finance",
        "human_resource",
        "projects",
        "regional_manager",
        "threat",
        "ceo",
        "common",
        "incidence",
        "themes",
    ],
}

# AXES configuration
AXES_USERNAME_FORM_FIELD = 'email'
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = 1
# AXES_ONLY_USER_FAILURES = True
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True
AXES_RESET_ON_SUCCESS = True
